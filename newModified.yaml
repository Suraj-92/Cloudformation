AWSTemplateFormatVersion: 2010-09-09

Description: This template creates an Application Load Balancer

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "Export VPC Stack Name"
        Parameters:
          - ExportVpcStackName
      - 
        Label: 
          default: "EC2 Parameters"
        Parameters:
          - AmazonImageID
          - InstanceType
          - KeyName

Parameters:
  ExportVpcStackName:
    Description: The name of the vpc stack that exports values
    Type: String

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  AmazonImageID:
    Description: The ID of the Amazon machine image (AMI)
    Type: String

Resources:
#Create an Application Load Balancer
  ApplicationLoadBalancerpublic:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyApplicationLoadBalancerPublic
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-ALBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet1
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet2

#Create an Application Load Balancer
  ApplicationLoadBalancerprivate:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyApplicationLoadBalancerPrivate
      Scheme: internal
      Type: application
      IpAddressType: ipv4
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-ALBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet2

#Create a Listener on Port 80
  # ALBListenerNoSslCertificate:
  #   Type: 'AWS::ElasticLoadBalancingV2::Listener'
  #   Properties:
  #     DefaultActions:
  #       - RedirectConfig:
  #           Host: '#{host}'
  #           Path: '/#{path}'
  #           Port: '443'
  #           Protocol: HTTPS
  #           StatusCode: HTTP_301
  #         Type: redirect 
  #     LoadBalancerArn: !Ref ApplicationLoadBalancerpublic
  #     Port: 80
  #     Protocol: HTTP 

# Create a Target Group
  ALBTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      Name: MyWebServersPublic
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2Instance1
          Port: 80
        # - Id: !Ref EC2Instance2
        #   Port: 80
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-VPC

  ALBTargetGroupPrivate:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      Name: MyWebServersPrivate
      Port: 80
      Protocol: HTTP
      Targets:
        - Id: !Ref EC2Instance2
          Port: 80
        # - Id: !Ref EC2Instance2
        #   Port: 80
      TargetType: instance
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-VPC

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet1
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageID 
      Tags:
        - Key: Name
          Value: EC2 | Public Subnet 1

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      SubnetId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-PrivateSubnet1
      SecurityGroupIds:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
      KeyName: !Ref KeyName
      ImageId: !Ref AmazonImageID 
      Tags:
        - Key: Name
          Value: EC2 | Private Subnet 1

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmazonImageID
      InstanceType: !Ref EC2Instance1
      SecurityGroups:
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup

  # LaunchConfigPrivate:
  #   Type: 'AWS::AutoScaling::LaunchConfiguration'
  #   Properties:
  #     ImageId: !Ref AmazonImageID
  #     InstanceType: !Ref EC2Instance2
  #     SecurityGroups:
  #       - Fn::ImportValue: !Sub ${ExportVpcStackName}-WebServerSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: EC2-Private-config

Outputs:
# Export Target Group
  ALBTargetGroupPublic:
    Description: Webserver target group 
    Export:
      Name: !Sub ${AWS::StackName}-ALBTargetGroupPublic
    Value: !Ref ALBTargetGroupPublic

# Export Target Group
  ALBTargetGroupPrivate:
    Description: Webserver target group 
    Export:
      Name: !Sub ${AWS::StackName}-ALBTargetGroupPrivate
    Value: !Ref ALBTargetGroupPrivate

# Export Application Load Balancer Dns Name
  ApplicationLoadBalancerDnsNamePublic:
    Description: Application Load Balancer DNS Name 
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsNamePublic
    Value: !GetAtt ApplicationLoadBalancerpublic.DNSName 

# Export Application Load Balancer Zone ID
  ApplicationLoadBalancerZoneIDPublic:
    Description: Application Load Balancer Canonical Hosted Zone ID
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerZoneIDPublic
    Value: !GetAtt ApplicationLoadBalancerpublic.CanonicalHostedZoneID

# Export Application Load Balancer Dns Name
  ApplicationLoadBalancerDnsNamePrivate:
    Description: Application Load Balancer DNS Name 
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsNamePrivate
    Value: !GetAtt ApplicationLoadBalancerprivate.DNSName 

# Export Application Load Balancer Zone ID
  ApplicationLoadBalancerZoneIDPrivate:
    Description: Application Load Balancer Canonical Hosted Zone ID
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerZoneIDPrivate
    Value: !GetAtt ApplicationLoadBalancerprivate.CanonicalHostedZoneID