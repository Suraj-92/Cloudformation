AWSTemplateFormatVersion: 2010-09-09

Description: Basic template that defines a single Amazon EC2 instance with a security group that allows SSH traffic on port 22 and HTTP traffic on port 80 on Linux Virtual Machine.

Parameters:
  VpcId: 
    Description: VPC id 
    Type: String
    Default: vpc-09d1c9e49436c1169

  PublicSubnet1:
    Description: Subnet Id where instance will create 
    Type: String
    Default: subnet-065357d55f5b018ea

  PublicSubnet2:
    Description: Subnet Id where instance will create 
    Type: String
    Default: subnet-012874f09e1276bbf

  PrivateSubnet1:
    Description: Subnet Id where instance will create 
    Type: String
    Default: subnet-0d2abd867dc72f989

  PrivateSubnet2:
    Description: Subnet Id where instance will create 
    Type: String
    Default: subnet-0680d669b865aec34

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro]
    ConstraintDescription: must be a valid EC2 instance type.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  Application:
    Description: Application Name
    Type: String
    AllowedPattern: "[A-Za-z0-9]+"
  
  Environment:
    AllowedValues: [dev,qa,prod,venv]
    Default: venv
    Description: The name of the Environment
    Type: String

Resources:
  # ConsoleInstanceProfile:
  #   Type: AWS::IAM::InstanceProfile
  #   Properties:
  #     Path: /
  #     Roles:
  #       - !Ref SSMInstanceRole

  # SSMInstanceRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Action: ['sts:AssumeRole']
  #         Effect: Allow
  #         Principal:
  #           Service:
  #             - ec2.amazonaws.com
  #             - ssm.amazonaws.com
  #     Path: /
  #     ManagedPolicyArns:
  #     - !Ref AmazonSSMManagedInstanceCorePolicy 

  # AmazonSSMManagedInstanceCorePolicy:
  #   Type: AWS::IAM::ManagedPolicy
  #   Properties:
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Action:
  #         - ssm:DescribeAssociation
  #         - ssm:GetDeployablePatchSnapshotForInstance
  #         - ssm:GetDocument
  #         - ssm:DescribeDocument
  #         - ssm:GetManifest
  #         - ssm:GetParameter
  #         - ssm:GetParameters
  #         - ssm:ListAssociations
  #         - ssm:ListInstanceAssociations
  #         - ssm:PutInventory
  #         - ssm:PutComplianceItems
  #         - ssm:PutConfigurePackageResult
  #         - ssm:UpdateAssociationStatus
  #         - ssm:UpdateInstanceAssociationStatus
  #         - ssm:UpdateInstanceInformation
  #         Resource: "*"
  #       - Effect: Allow
  #         Action:
  #         - ssmmessages:CreateControlChannel
  #         - ssmmessages:CreateDataChannel
  #         - ssmmessages:OpenControlChannel
  #         - ssmmessages:OpenDataChannel
  #         Resource: "*"
  #       - Effect: Allow
  #         Action:
  #         - ec2messages:AcknowledgeMessage
  #         - ec2messages:DeleteMessage
  #         - ec2messages:FailMessage
  #         - ec2messages:GetEndpoint
  #         - ec2messages:GetMessages
  #         - ec2messages:SendReply
  #         Resource: "*"
  #       - Action: s3:ListBucket
  #         Effect: Allow
  #         Resource:
  #         - !Sub arn:aws:s3:::cloudadvisory
  #         Sid: AllowRootListingOfEnvBucket
  #       - Action: s3:Get*
  #         Effect: Allow
  #         Resource:
  #          - !Sub arn:aws:s3:::cloudadvisory/*

  AppserverElbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: ELB Security Group
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          ToPort: 80
          Description: Allow from internat
      Tags:
        - Key: Name
          Value: !Sub '${Application}-appserver-elb-sg'

  AppServerSG:
    Type: AWS::EC2::SecurityGroup    
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Web Server Security Group
      SecurityGroupIngress:
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref AppserverElbSG
          ToPort: 80
          Description: Allow SSH from bastion subnet                                     
      Tags:
      - Key: Name
        Value: !Sub '${Application}-appserver-sg'

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Application}-${Environment}-alb'
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 600
      SecurityGroups: 
        - !Ref AppserverElbSG
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      #HealthCheckPath: /index.html
      Matcher:
        HttpCode: 200
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 3

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    #DependsOn:
     # - ConsoleInstanceProfile
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      #IamInstanceProfile: !Ref ConsoleInstanceProfile
      SecurityGroups:
        - !Ref AppServerSG
      # UserData:
      #   Fn::Base64: !Sub
      #   - |
      #     #!/bin/bash
      #     exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
      #     # Sleep for the instance role might not be properly attached
      #     sleep 10
      #     # copy index file from s3 to /var/www/html/
      #     aws s3 cp s3://cloudadvisory/index.html /var/www/html/ --region eu-central-1
      #     # Install httpd2 for testing 
      #     sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      #     sudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
      #     sudo yum update -y
      #     sudo yum install httpd -y
      #     sudo systemctl start httpd.service
      #     sudo systemctl enable httpd.service
      #   - {
      #     }

  AppServerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: 4
      MinSize: 1
      MetricsCollection:
        - Granularity: 1Minute
      Tags:
        - Key: Name
          PropagateAtLaunch: True
          Value: cloudapp1-dev-asg
      TargetGroupARNs:
        - !Ref TargetGroup
      TerminationPolicies:
        - OldestLaunchConfiguration
        - OldestInstance
        - Default
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'AppServerASG'
      Cooldown: '300'
      ScalingAdjustment: 1

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'AppServerASG'
      Cooldown: '60'
      ScalingAdjustment: -1

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 10% for 1 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 10
      AlarmActions: [!Ref 'WebServerScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'AppServerASG'
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 5% for 1 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5
      AlarmActions: [!Ref 'WebServerScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'AppServerASG'
      ComparisonOperator: LessThanThreshold

Outputs:
  AppELBDNS:
    Description: InstanceId of the newly created EC2 instance
    Value: !GetAtt [ApplicationLoadBalancer, DNSName]